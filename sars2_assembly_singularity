#================================================================
# HEADER
#================================================================
#% USAGE
#%    $bash sars2_assembly_singularity <REFERENCEGENOME> <001.fastq.gz> <002.fastq.gz> <PREFIX> <NUM_THREADS> <DEPTH> <MIN_LEN> <ADAPTERS> <DP_INTRAHOST> <TRIMM_LEN>
#%
#% DESCRIPTION
#%    This script performs a reference guided genome assembly of SARS-CoV-2 using singularity. Python scripts were developed based on the wuhan SARS-CoV-2 reference genome NC_045512.2.
#%    The workflow was developed to work with Illumina paired-end reads. Tests with other technologies should be performed.
#%
#% OPTIONS
#%    <REFERENCEGENOME>    -   Fasta file with reference genome
#%    <001.fastq.gz>       -   Fasqt file with positive sense reads (R1)
#%    <002.fastq.gz>       -   Fastq file with negative sense reads (R2)
#%    <PREFIX>             -   Prefix string to store results and to rename consensus genome
#%    <NUM_THREADS>        -   Number of threads
#%    <DEPTH>              -   Minimum depth to mask unanssembled regions
#%    <MIN_LEN>            -   Minimum length to trimm sequences
#%    <ADAPTERS>           -   Fasta file with adapters used in the sequencing analysis
#%    <DP_INTRAHOST>       -   Minimum depth to consider a intrahost minor allele, optional, default = 100
#%    <TRIM_LEN>           -   Length to trimm front and tail of reads, optional, default = 0
#%
#% EXAMPLES
#%    $bash sars2_assembly_singularity reference.fasta code_R1.fastq.gz code_R2.fastq.gz prefix_name 8 5 75 adapters.fa
#%    $bash sars2_assembly_singularity reference.fasta code_R1.fastq.gz code_R2.fastq.gz prefix_name 8 5 75 adapters.fa 50 5
#%
#% DEPENDENCIES
#%    BWA Version: 0.7.17-r1198-dirty
#%    samtools 1.7 Using htslib 1.7-2
#%    fastp 0.20.1
#%    iVar version 1.3.1
#%    bam-readcount version: 0.8.0-unstable-7-625eea2
#%    Python 3.7.10
#%    mafft v7.310 (2017/Mar/17)
#%    nextclade 0.14.2
#%    pangolin 3.1.11
#%    bedtools v2.26.0
#%    bamdst 1.0.6
#%    seqtk 1.3-r106
#%
#================================================================
#- IMPLEMENTATION
#-    version         $sars2_assembly 0.0.5
#-    authors         Filipe Dezordi and Gabriel Wallau
#-    maintainer      Filipe Dezordi (zimmer.filipe@gmail.com)
#-    username        dezordi
#-    license         GPL
#-    information     dezordi.github.io
#================================================================
#  HISTORY
#     2021/04/17 : dezordi : Script creation
#     2021/06/22 : dezordi : Update, improve indels recognition into intrahost variant analysis
#     2021/09/11 : dezordi : Update, improve consensus assembly of low quality mapping regions, insertion of exact coverage percentage based on depth treshold, create arguments to modify depth treshold of intrahost minor alleles and to trimm reads.
#
#================================================================
# ACTIVATE CONDA AND PANGOLIN
#================================================================

# >>> conda initialize >>>
# !! Contents within this block are managed by 'conda init' !!
__conda_setup="$('/root/miniconda3/bin/conda' 'shell.bash' 'hook' 2> /dev/null)"
echo "Activating conda via bash"
if [ $? -eq 0 ]; then
    eval "$__conda_setup"
else
    if [ -f "/root/miniconda3/etc/profile.d/conda.sh" ]; then
        . "/root/miniconda3/etc/profile.d/conda.sh"
    else
        export PATH="/root/miniconda3/bin/:$PATH"
    fi
fi
unset __conda_setup
# <<< conda initialize <<<
echo "Activating pangolin"
conda activate pangolin

#================================================================
# ARGUMENTS
#================================================================

FASTA=$1 #reference genome
FASTQ1=$2 #foward reads
FASTQ2=$3 #reverse reads
PREFIXOUT=$4 #prefix for output
THREADS=$5 #number of threads
DEPTH=$6 #minum depth to mask regions
MIN_LEN=$7 #minimum length to trimm reads
ADAPTERS=$8 #fasta file with adapters
DP_INTRAHOST=${9-100} #minimum dp for intrahost analysis
TRIMM_LEN=${10-0} #length to trim front and tail reads with fastp

#================================================================
# WORKFLOW
#================================================================

# CHECK DATA DIR CONTAINER
echo ":: THE CONTAINER HAVE ACCESS TO THE FOLLOWING FILES ::"
ls /data/
echo ":: ------------------------------------------------ ::"


##CREATING INDEX OF REFERENCE GENOME
python /app/ViralFlow/python_scripts/bwa_index.py -in /data/$FASTA

#CREATING DIR TO STORE RESULTS
mkdir /data/$PREFIXOUT.results/
cd /data/$PREFIXOUT.results

## ------------------------------ STEP 1 ---------------------------------------
##QUALITY CHECK
echo ''
echo '--- STEP 1 ---'
echo ''

echo "fastp analysis:" > $PREFIXOUT.time.txt
start=$(date +%s%3N)


python /app/ViralFlow/python_scripts/fastp.py -f1 /data/$FASTQ1 -f2 /data/$FASTQ2 -pr $PREFIXOUT -mi $MIN_LEN -p $THREADS -a /data/$ADAPTERS -t $TRIMM_LEN

echo '--- DONE -----'

end=$(date +%s%3N)
analysis_in_miliseconds=$(expr $end - $start)
analysis_in_minutes="$(($analysis_in_miliseconds / 60000)).$(($analysis_in_miliseconds % 60000))"
echo $analysis_in_minutes >> $PREFIXOUT.time.txt

## ------------------------------ STEP 2 ---------------------------------------
##MAPPING
echo ''
echo '--- STEP 2 ---'
echo ''

echo "BWA and iVar analysis:" >> $PREFIXOUT.time.txt
start=$(date +%s%3N)

python /app/ViralFlow/python_scripts/bwa_mem.py -f /data/$FASTA -pr $PREFIXOUT -p $THREADS
python /app/ViralFlow/python_scripts/ivar.py -f /data/$FASTA -pr $PREFIXOUT -dp $DEPTH

echo '--- DONE -----'

end=$(date +%s%3N)
analysis_in_miliseconds=$(expr $end - $start)
analysis_in_minutes="$(($analysis_in_miliseconds / 60000)).$(($analysis_in_miliseconds % 60000))"
echo $analysis_in_minutes >> $PREFIXOUT.time.txt

## ------------------------------ STEP 3 ---------------------------------------

##GET PUTATIVE MINOR VARIANTS STEP

echo ''
echo '--- STEP 3 ---'
echo ''
echo "Minor variant analysis:" >> $PREFIXOUT.time.txt
start=$(date +%s%3N)


python /app/ViralFlow/python_scripts/get_mvs_sing.py -f /data/$FASTA -pr $PREFIXOUT -dp $DEPTH -p $THREADS -di $DP_INTRAHOST

echo '--- DONE -----'

end=$(date +%s%3N)
analysis_in_miliseconds=$(expr $end - $start)
analysis_in_minutes="$(($analysis_in_miliseconds / 60000)).$(($analysis_in_miliseconds % 60000))"
echo $analysis_in_minutes >> $PREFIXOUT.time.txt

## ------------------------------ STEP 4 ---------------------------------------

##GET LINEAGE AND MUTATIONS

echo ''
echo '--- STEP 4 ---'
echo ''
echo "Nextclade and Pangolin analysis:" >> $PREFIXOUT.time.txt

start=$(date +%s%3N)


python /app/ViralFlow/python_scripts/pango_nextclade.py -pr $PREFIXOUT -dp $DEPTH -p $THREADS

echo '--- DONE -----'

end=$(date +%s%3N)
analysis_in_miliseconds=$(expr $end - $start)
analysis_in_minutes="$(($analysis_in_miliseconds / 60000)).$(($analysis_in_miliseconds % 60000))"
echo $analysis_in_minutes >> $PREFIXOUT.time.txt

##GET ASSEMBLY METRICS
## ------------------------------ STEP 5 ---------------------------------------
echo ''
echo '--- STEP 5 ---'
echo ''

echo "bamdst analysis:" >> $PREFIXOUT.time.txt
start=$(date +%s%3N)

python /app/ViralFlow/python_scripts/assembly_metrics.py -pr $PREFIXOUT

echo '--- DONE -----'

COV=$(seqtk comp $PREFIXOUT.depth$DEPTH.fa | awk '{x=$3+$4+$5+$6;y=$2;print $1,y-x,y,100-((y-x)/y)*100}' | cut -f 4 -d ' ')
printf "cov_$DEPTH%%\n$COV" > coverage.txt
paste chromosomes.report coverage.txt > chromosomes.report.tmp
rm chromosomes.report && mv chromosomes.report.tmp chromosomes.report
end=$(date +%s%3N)
analysis_in_miliseconds=$(expr $end - $start)
analysis_in_minutes="$(($analysis_in_miliseconds / 60000)).$(($analysis_in_miliseconds % 60000))"
echo $analysis_in_minutes >> $PREFIXOUT.time.txt
cd ..
