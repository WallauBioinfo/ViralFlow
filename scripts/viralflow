#!/usr/bin/env python3
import argparse
import viralflow
import os
from pathlib import Path
from sys import exit
import subprocess
import shlex

__author__ = "Antonio Marinho da Silva Neto"
#__copyright__ = "Copyright 2021, Rede Genomica Fiocruz"
#__credits__ = []
__license__ = "GPL"
__version__ = "0.1"
__maintainer__ = "Antonio Marinho da Silva Neto"
__email__ = "antonio.marinho@fiocruz.br"
__status__ = "Prototype"

# -- Docstring -----------------------------------------------------------------
'''
viralflow
----

This script activate

Usage
----

>$ viralflow <dir_path> <cred_flpath> <db_name>

Input
-----

WARNING:

'''

# --- FUNCTIONS ---------------------------------------------------------------
# SANITY CHECK


def __checkIfPathExists(str, argName):
    try:
        assert(Path(str).exists())
    except(AssertionError):
        print(f'ERROR: {argName} provided ({str}) does not exist.')
        exit(1)


def __checkIfIsFile(str, argName):
    try:
        assert(Path(str).is_file())
    except(AssertionError):
        print(f'ERROR: {argName} provided ({str}) is not a file.')
        exit(1)


def __checkIfIsDir(str, argName):
    try:
        assert(Path(str).is_dir())
    except(AssertionError):
        print(f'ERROR: {argName} provided ({str}) is not a dir.')
        exit(1)

# -----------------------------------------------------------------------------


dsc = '''
'''

# get viralflow path
script_file = _path = os.path.realpath(__file__)
viralflow_path = '/'.join(script_file.split('/')[0:-2])+'/'


# ---- INPUT ------------------------------------------------------------------
parser = argparse.ArgumentParser(description=dsc)
# --- general -----------------------------------------------------------------
parser.add_argument('-singPath', type=str, help='singularity path',
                    default='/usr/local/bin/singularity')

# --- Build mode --------------------------------------------------------------
parser.add_argument('--build', action='store_true', help='set build mode on')
parser.add_argument('-outDir', type=str, default=os.getcwd()+'/',
                    help='set directory path for output (default = working dir)')
parser.add_argument('-singFilePath', type=str, help='Singularityfile path',
                    default=viralflow_path+'Singularityfile_test')

parser.add_argument('-containerName', type=str, help='set container name',
                    default='viralflow_container')

parser.add_argument('-singOpt', type=str, help='singularity build option',
                    default='--fakeroot --sandbox')

# --- Run mode -----------------------------------------------------------------
parser.add_argument('--run', action='store_true', help='set run local mode on')

parser.add_argument('--runContainer', action='store_true',
                    help='Run singularity container')

parser.add_argument('-inputDir', type=str,
                    help='set input directory path')

parser.add_argument('-containerImg', type=str, default=None,
                    help='path for viralflow container')

parser.add_argument('-referenceGenome', type=str,
                    help='name of reference genome file at input dir')

parser.add_argument('-adaptersFile', type=str,
                    help='adapters file name at input dir')

h0 = 'minimum depth to mask unanssembled regions (default=5)'
parser.add_argument('-depth', type=int, default=5, help=h0)

parser.add_argument('-minLen', type=int, default=75,
                    help='minimum length to trimm sequences (default = 75)')

h1 = 'minimum depth value to consider intrahost minor allele (default = 100)'
parser.add_argument('-minDpIntrahost', type=int, default=100, help=h1)

h2 = 'length to trimm front and tail of reads on fastp analysis (default = 0)'
parser.add_argument('-trimLen', type=int, default=0, help=h2)
h3 = "command to call or absolute path of singularity (default = 'singularity')"

parser.add_argument('-totalCpus', type=int, default=1,
                    help='total of cpus for parallel assemblies (default = 1)')

parser.add_argument('-cpusPerSample', type=int, default=None,
                    help='cpus to use on individual sample run (default = auto)')

parser.add_argument('-nxtBin', type=str, default='nextclade',
                    help='path for nextclade command (default=nextclade)')

parser.add_argument('-nxtDtset', type=str, default=None,
                    help='path for nextclade dataset dir')
parser.add_argument('-v', '--verbose', action='store_true',
                    help='increase output verbosity')
args = parser.parse_args()

# -----------------------------------------------------------------------------
outDir = args.outDir
if outDir.endswith('/') is False:
    outDir += '/'

print('| --------------------------------------------------------------------|')
print('|                            >> ViralFlow <<')
print('|                               v0.0.6.dev')
print('|                            made by Wallau Lab ')
print('|                      Aggeu MagalhÃ£es Research Institute')
print('|                             FIOCRUZ - Pernambuco')
print('| --------------------------------------------------------------------|')
print('| ')
print('| ')
print('| --------------------------------------------------------------------|')
print('| Author:')
print('|    Filipe Z. Dezordi (zimmer.filipe@gmail.com)')
print('| More information at: ')
print('|    https://github.com/dezordi/ViralFlow/')
print('| --------------------------------------------------------------------|')
print('| --------------------------------------------------------------------|')
print("| USAGE:")
print('| * build containers ')
print('| >$ viralflow --build -singFilePath /path/to/ViralFlow/Singularityfile')
print('| --------------------------------------------------------------------|')
print('| HOW TO CITE:')
print('| ')
print('| [PrePrint]')
print('| ViralFlow: an automated workflow for SARS-CoV-2 genome assembly, ')
print('| lineage assignment, mutations and intrahost variants detection')
print('| medRxiv 2021.10.01.21264424;')
print('| doi: https://doi.org/10.1101/2021.10.01.21264424')
print('| --------------------------------------------------------------------|')

# sanity check ----------------------------------------------------------------
# check singularity path validity
#try:
#    assert(Path(args.singPath).exists())
#except(AssertionError):
#    print('ERROR :', args.singPath, ' Singularity path does not exists.')
#    exit(1)
# check if mode was set
if (args.build is False) and ((args.run is False)
                              and (args.runContainer is False)):
    s = "(use either '--build', '--run' or '--runContainer')"
    print(f"ERROR : a mode must be set {s}.")
    exit(1)

# -----------------------------------------------------------------------------


print('| Parameters')
print('| ----------')
if args.build is True:
    print('|    BUILD MODE ON      |')
    print('| output_dir    : ', outDir)
    print('| singFilePath  : ', args.singFilePath)
    print('| containerName : ', args.containerName)
    print('| singOpt       : ', args.singOpt)
    print('| singPath      : ', args.singPath)
if (args.run is True) or (args.runContainer is True):
    print('|      RUN MODE ON      |')
    if args.runContainer is True:
        print('| singPath        : ', args.singPath)
        print('| containerImg    : ', args.containerImg)
    print('| inputDir        : ', args.inputDir)
    print('| referenceGenome : ', args.referenceGenome)
    print('| adaptersFile    : ', args.adaptersFile)
    print('| depth           : ', args.depth)
    print('| minLen          : ', args.minLen)
    print('| minDpIntrahost  : ', args.minDpIntrahost)
    print('| trimLen         : ', args.trimLen)
    print('| totalCpus       : ', args.totalCpus)
    print('| cpusPerSample   : ', args.cpusPerSample)
    print('| nxtBin          : ', args.nxtBin)
    print('| nxtDtset        : ', args.nxtDtset)
print('| --------------------------------------------------------------------|')

# Build mode
if args.build is True:
    # TODO: check input (sanity test)
    try:
        assert(args.singFilePath is not None)
    except(AssertionError):
        print('ERROR : Singularityfile path must be provided.')
        exit(1)
    print('@ building container ', outDir+args.containerName)
    viralflow.containers.buildSing(outDir, args.singFilePath,
                                   container_name=args.containerName,
                                   sing_path=args.singPath,
                                   sing_opt=args.singOpt)

# Run mode
if args.run is True:
    # --- sanity check ---------------------------------------------------
    # check dirs
    __checkIfIsDir(args.inputDir, 'inputDir')
    __checkIfIsDir(args.nxtDtset, 'nxtDtset')
    # check files
    __checkIfIsFile(args.inputDir+args.referenceGenome, 'referenceGenome')
    __checkIfIsFile(args.inputDir+args.adaptersFile, 'adaptersFile')
    # ---------------------------------------------------------------------
    # TODO: hide std error from terminal and store at log
    viralflow.run_viralflow_pp(args.inputDir, args.referenceGenome,
                               args.adaptersFile, args.depth, args.minLen,
                               args.minDpIntrahost, args.trimLen,
                               args.nxtDtset, nxt_bin=args.nxtBin,
                               cpus_total=args.totalCpus,
                               cpus_pprc=args.cpusPerSample,
                               verbose=args.verbose)
if args.runContainer is True:
    # sanity check
    # TODO: Check container path
    viralflow.containers.run_sing_container(args.containerImg, args.inputDir,
                                            args.referenceGenome,
                                            args.adaptersFile,
                                            threads=args.totalCpus,
                                            depth=args.depth,
                                            min_len=args.minLen,
                                            min_dp_intrahost=args.minDpIntrahost,
                                            trim_len=args.trimLen,
                                            sing_call=args.singPath)
    
print(' | --- DONE --- |')
